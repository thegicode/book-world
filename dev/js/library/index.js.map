{
  "version": 3,
  "sources": ["../../../app/src/utils/CustomEventEmitter.ts", "../../../app/src/utils/CustomFetch.ts", "../../../app/src/modules/model.ts", "../../../app/src/components/NavGnb.ts", "../../../app/src/pages/library/Library.ts", "../../../app/src/pages/library/LibraryRegion.ts", "../../../app/src/pages/library/LibraryItem.ts", "../../../app/src/pages/library/index.ts"],
  "sourcesContent": ["class CustomEventEmitter<T extends ICustomEventDetail> {\n    private _bus: HTMLElement;\n\n    constructor() {\n        this._bus = document.createElement(\"div\");\n    }\n\n    add(event: string, callback: (event: ICustomEvent<T>) => void): void {\n        this._bus.addEventListener(\n            event,\n            callback as EventListenerOrEventListenerObject\n        );\n    }\n\n    remove(event: string, callback: (event: ICustomEvent<T>) => void): void {\n        this._bus.removeEventListener(\n            event,\n            callback as EventListenerOrEventListenerObject\n        );\n    }\n\n    dispatch(event: string, detail: T = {} as T): void {\n        this._bus.dispatchEvent(new CustomEvent(event, { detail }));\n    }\n}\n\nexport default new CustomEventEmitter();\n", "\nclass CustomFetch {\n    defaultOptions: RequestInit\n\n    constructor(baseOptions: RequestInit = {}) {\n        this.defaultOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                // 'Authorization': `Bearer ${getToken()}`\n            },\n            ...baseOptions\n        }\n    }\n\n    async fetch<T = unknown>(url: string, options?: RequestInit): Promise<T> {\n        const finalOptions: RequestInit & { timeout?: number} = {\n            ...this.defaultOptions,\n            ...options,\n            timeout: 5000\n        }\n        try {\n            const response = await fetch(url, finalOptions)\n            if (!response.ok) {\n                throw new Error(`Http error! status: ${response.status}, message: ${response.statusText}`)\n            } \n            const data = await response.json()\n            return data as T\n        } catch(error: unknown) {\n            console.error(`Error fetching data: ${error}`)\n            throw new Error(`Error fetching data: ${error}`)\n\n        }\n    }\n}\n\nexport default new CustomFetch()\n", "const cloneDeep = <T>(obj: T): T => {\n\treturn JSON.parse(JSON.stringify(obj))\n}\n\ninterface State {\n\tfavoriteBooks: string[],\n\tlibraries: Record<string, string>\n\tregions: Record<string, Record<string, string>>\n}\n\nconst initialState: State = {\n\tfavoriteBooks: [],\n\tlibraries: {},\n\tregions: {}\n}\n\nconst storageKey = 'BookWorld'\n\nconst setState = (newState: State) => {\n\ttry {\n\t\tlocalStorage.setItem(storageKey, JSON.stringify(newState))\n\t} catch (error) {\n\t\tconsole.error(error)\n\t}\n\t// console.log(newState)\n\t// console.log([...newState.favoriteBooks])\n\t// console.log([...Object.values(newState.libraries)])\n}\n\nconst getState = (): State => {\n\ttry {\n\t\tconst storedState = localStorage.getItem(storageKey)\n\t\tif (storedState == null) {\t\n\t\t\tsetState(initialState)\n\t\t\treturn initialState\n\t\t}\n\t\treturn cloneDeep(JSON.parse(storedState))\n\t} catch (error) {\n\t\tconsole.error(error)\n\t\tthrow new Error('Failed to get state from localStrage.')\n\t}\n}\n\nconst state: State = getState()\n\n\nconst addFavoriteBook = (isbn: string): void => {\n\tstate.favoriteBooks.push(isbn)\n\tsetState(state)\n}\n\nconst removeFavoriteBook = (isbn: string): void => {\n\tconst index = state.favoriteBooks.indexOf(isbn)\n\tif (index !== -1) {\n\t\tstate.favoriteBooks.splice(index, 1)\n\t\tsetState(state)\n\t}\n}\n\nconst isFavoriteBook = (isbn: string): boolean => {\n\treturn state.favoriteBooks.includes(isbn)\n}\n\nconst addLibrary = (code: string, name: string): void => {\n\tstate.libraries[code] = name\n\tsetState(state)\n}\n\nconst removeLibrary = (code: string): void => {\n\tdelete state.libraries[code]\n\tsetState(state)\n}\n\nconst hasLibrary = (code: string): boolean => {\n\treturn code in state.libraries\n}\n\nconst addRegion = (regionName: string): void => {\n\tstate.regions[regionName] = {}\n\tsetState(state)\n}\n\nconst removeRegion = (regionName: string): void => {\n\tdelete state.regions[regionName]\n\tsetState(state)\n}\n\nconst addDetailRegion = (regionName: string, detailName: string, detailCode: string): void => {\n\tstate.regions[regionName][detailName] = detailCode\n\tsetState(state)\n}\n\nconst removeDetailRegion = (regionName: string, detailName: string): void => {\n\tdelete state.regions[regionName][detailName]\n\tsetState(state)\n}\n\nexport {\n\tstate,\n\tsetState,\n\tgetState,\n\taddFavoriteBook,\n\tremoveFavoriteBook,\n\tisFavoriteBook,\n\taddLibrary,\n\tremoveLibrary,\n\thasLibrary,\n\taddRegion,\n\tremoveRegion,\n\taddDetailRegion,\n\tremoveDetailRegion\n}\n", "import { getState } from \"../modules/model\";\n\nexport default class NavGnb extends HTMLElement {\n    private favoriteBooksSize: number;\n\n    constructor() {\n        super();\n        this.favoriteBooksSize = this.getFavoriteBooksSize();\n    }\n\n    connectedCallback(): void {\n        this.render();\n        this.setSelectedMenu();\n        // CustomEventEmitter.add('favorite-books-changed', this.updateFavoriteBooksSize.bind(this))\n    }\n\n    disconnectedCallback(): void {\n        // CustomEventEmitter.remove('favorite-books-changed', this.updateFavoriteBooksSize)\n    }\n\n    private getFavoriteBooksSize(): number {\n        return getState().favoriteBooks.length;\n    }\n\n    private render(): void {\n        this.innerHTML = `\n            <nav class=\"gnb\">\n                <a class=\"gnb-item\" href=\"./search\">\uCC45 \uAC80\uC0C9</a>\n                <a class=\"gnb-item\" href=\"./favorite\">\uB098\uC758 \uCC45 (<span class=\"size\">${this.favoriteBooksSize}</span>)</a>\n                <a class=\"gnb-item\" href=\"./library\">\uB3C4\uC11C\uAD00 \uC870\uD68C</a>\n                <a class=\"gnb-item\" href=\"./setting\">\uC124\uC815</a>\n            </nav>`;\n    }\n\n    private setSelectedMenu(): void {\n        const PATHS = [\"/search\", \"/favorite\", \"/library\", \"/setting\"];\n        const idx = PATHS.indexOf(document.location.pathname);\n        if (idx >= 0) this.querySelectorAll(\"a\")[idx].ariaSelected = \"true\";\n    }\n\n    // private updateFavoriteBooksSize(event: Event): void {\n    //     const customEvent = event as CustomEvent<{ size: number }>\n    //     const { size } = customEvent.detail\n    //     this.querySelector('.size')!.textContent = String(size || this.getFavoriteBooksSize())\n    // }\n}\n", "import { CustomEventEmitter, CustomFetch } from \"../../utils/index\";\nimport { hasLibrary } from \"../../modules/model\";\nimport LibraryItem from \"./LibraryItem\";\n\nexport default class Library extends HTMLElement {\n    private form: HTMLFormElement;\n\n    constructor() {\n        super();\n        this.form = this.querySelector(\"form\") as HTMLFormElement;\n    }\n\n    connectedCallback() {\n        CustomEventEmitter.add(\n            \"set-detail-region\",\n            this.handleDetailRegion.bind(this) as EventListener\n        );\n    }\n\n    disconnectedCallback() {\n        CustomEventEmitter.remove(\n            \"set-detail-region\",\n            this.handleDetailRegion as EventListener\n        );\n    }\n\n    private async fetchLibrarySearch(detailRegionCode: string) {\n        try {\n            const url = `/library-search?dtl_region=${detailRegionCode}&page=${1}&pageSize=${20}`;\n            const data = await CustomFetch.fetch<ILibrarySearchByBookResult>(\n                url\n            );\n            this.render(data);\n        } catch (error) {\n            console.error(error);\n            throw new Error(\"Fail to get library search data.\");\n        }\n    }\n\n    private render(data: ILibrarySearchByBookResult) {\n        const {\n            // pageNo, pageSize, numFound, resultNum,\n            libraries,\n        } = data;\n\n        if (libraries.length === 0) {\n            this.showMessage(\"notFound\");\n            return;\n        }\n\n        const template = (\n            document.querySelector(\"#tp-item\") as HTMLTemplateElement\n        ).content.firstElementChild;\n        const fragment = libraries.reduce(\n            (fragment: DocumentFragment, lib: ILibrary) => {\n                if (template) {\n                    const libraryItem = template.cloneNode(true) as LibraryItem;\n                    libraryItem.dataset.object = JSON.stringify(lib);\n                    if (hasLibrary(lib.libCode)) {\n                        libraryItem.dataset.has = \"true\";\n                        fragment.insertBefore(libraryItem, fragment.firstChild);\n                    } else {\n                        fragment.appendChild(libraryItem);\n                    }\n                }\n                return fragment;\n            },\n            new DocumentFragment()\n        );\n\n        this.form.innerHTML = \"\";\n        this.form.appendChild(fragment);\n    }\n\n    private showMessage(type: string) {\n        const template = (\n            document.querySelector(`#tp-${type}`) as HTMLTemplateElement\n        ).content.firstElementChild;\n        if (template) {\n            const element = template.cloneNode(true);\n            this.form.innerHTML = \"\";\n            this.form.appendChild(element);\n        }\n    }\n\n    private handleDetailRegion(\n        evt: ICustomEvent<{ detailRegionCode: string }>\n    ) {\n        this.showMessage(\"loading\");\n        this.fetchLibrarySearch(evt.detail.detailRegionCode);\n    }\n}\n", "import { CustomEventEmitter } from \"../../utils/index\";\nimport { getState } from \"../../modules/model\";\n\nexport default class LibraryRegion extends HTMLElement {\n    private selectElement: HTMLSelectElement;\n\n    constructor() {\n        super();\n        this.selectElement = this.querySelector(\"select\") as HTMLSelectElement;\n    }\n\n    connectedCallback() {\n        this.renderRegion();\n        this.selectElement.addEventListener(\n            \"change\",\n            this.onChangeDetail.bind(this)\n        );\n    }\n\n    disconnectedCallback() {\n        this.selectElement.removeEventListener(\"change\", this.onChangeDetail);\n    }\n\n    private renderRegion() {\n        const favoriteRegions = getState().regions;\n\n        if (Object.values(favoriteRegions).length < 1) return;\n\n        const template = (\n            document.querySelector(\"#tp-region\") as HTMLTemplateElement\n        ).content.firstElementChild;\n        const container = this.querySelector(\".region\") as HTMLElement;\n\n        const fragment = new DocumentFragment();\n        for (const regionName of Object.keys(favoriteRegions)) {\n            const size = Object.keys(favoriteRegions[regionName]).length;\n            if (template && size > 0) {\n                const element = template.cloneNode(true) as HTMLElement;\n                const inputElement =\n                    element.querySelector<HTMLInputElement>(\"input\");\n                if (inputElement) inputElement.value = regionName;\n                const spanElement = element.querySelector(\"span\");\n                if (spanElement) spanElement.textContent = regionName;\n                fragment.appendChild(element);\n            }\n        }\n        container.appendChild(fragment);\n\n        const firstInput = container.querySelector(\"input\") as HTMLInputElement;\n        firstInput.checked = true;\n\n        this.renderDetailRegion(firstInput.value);\n        this.changeRegion();\n    }\n\n    private changeRegion() {\n        const regionRadios =\n            this.querySelectorAll<HTMLInputElement>(\"[name=region]\");\n        regionRadios.forEach((radio) => {\n            radio.addEventListener(\"change\", () => {\n                if (radio.checked) {\n                    const value = radio.value;\n                    this.renderDetailRegion(value);\n                }\n            });\n        });\n    }\n\n    private renderDetailRegion(regionName: string) {\n        this.selectElement.innerHTML = \"\";\n        const detailRegionObject = getState().regions[regionName];\n        for (const [key, value] of Object.entries(detailRegionObject)) {\n            const optionEl = document.createElement(\"option\");\n            optionEl.textContent = key;\n            optionEl.value = value;\n            this.selectElement.appendChild(optionEl);\n        }\n        const firstInput = this.selectElement.querySelector(\n            \"option\"\n        ) as HTMLOptionElement;\n        firstInput.selected = true;\n        this.onChangeDetail();\n    }\n\n    private onChangeDetail() {\n        const { value } = this.selectElement;\n        CustomEventEmitter.dispatch(\"set-detail-region\", {\n            detailRegionCode: value,\n        });\n    }\n}\n", "import { addLibrary, removeLibrary, hasLibrary } from \"../../modules/model\";\n\nexport default class LibraryItem extends HTMLElement {\n    private checkbox: HTMLInputElement | null = null;\n    private libCode = \"\";\n    private libName = \"\";\n\n    constructor() {\n        super();\n        this.checkbox =\n            this.querySelector<HTMLInputElement>(\"[name=myLibrary]\");\n    }\n\n    connectedCallback() {\n        this.render();\n        this.checkbox?.addEventListener(\"click\", this.onChange.bind(this));\n    }\n\n    disconnectedCallback() {\n        this.checkbox?.removeEventListener(\"click\", this.onChange);\n    }\n\n    private render(): void {\n        const data = JSON.parse(this.dataset.object || \"\") as ILibrary;\n        const { libCode, libName } = data;\n\n        Object.entries(data).forEach(([key, value]) => {\n            const element = this.querySelector(`.${key}`);\n            if (element) {\n                element.innerHTML = value;\n            }\n        });\n\n        const hoempageLink = this.querySelector<HTMLLinkElement>(\".homepage\");\n        if (hoempageLink) hoempageLink.href = data.homepage;\n\n        this.libCode = libCode;\n        this.libName = libName;\n\n        if (this.checkbox) this.checkbox.checked = hasLibrary(this.libCode);\n    }\n\n    private onChange(event: MouseEvent): void {\n        const target = event.target as HTMLInputElement;\n        if (target.checked) {\n            addLibrary(this.libCode, this.libName);\n        } else {\n            removeLibrary(this.libCode);\n        }\n    }\n}\n", "import { NavGnb } from \"../../components/index\";\n\nimport Library from \"./Library\";\nimport LibraryRegion from \"./LibraryRegion\";\nimport LibraryItem from \"./LibraryItem\";\n\ncustomElements.define(\"nav-gnb\", NavGnb);\ncustomElements.define(\"app-library\", Library);\ncustomElements.define(\"library-region\", LibraryRegion);\ncustomElements.define(\"library-item\", LibraryItem);\n"],
  "mappings": "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",
  "names": ["fragment"]
}
